
<div>
    @Html.ActionLink("Add post", "CreateModal", "Post", null, htmlAttributes: new { @class = "btn btn-default", id = "addPost" })

    <button type="button" class="btn btn-default btn-sm" onclick="ShowAllPosts()"><span>Все</span></button>
    <button type="button" class="btn btn-default btn-sm" onclick="ShowPublishedPosts()"><span>Опубликованные</span></button>
    <button type="button" class="btn btn-default btn-sm" onclick="ShowNotPublishedPosts()"><span>Не опубликованные</span></button>

    <label for="postSearchText">Поиск в:&nbsp;</label>
    <select id="postColSearch">
        <option value="Title" selected>постах</option>
        <option value="User.Login">пользователях</option>
        <option value="Category.Name">категориях</option>
    </select>
    <input id="postSearchText" type="text">
    <button id="postResetSearch" type="button" class="btn btn-default"><span class="ui-icon ui-icon-close"></span></button>
    <button id="postSearch" type="button" class="btn btn-default"><span class="ui-icon ui-icon-search"></span></button>
</div>

<div id="jpagerPosts"></div>
<table id="jqgPosts"></table>

<div id="post_dlg_toolbar" class="hidden">
    <table cellpadding="0" cellspacing="0" style="width:100%">
        <tr>
            <td>
                <button type="button" class="btn btn-default btn-sm" onclick="EditPost()"><span class="ui-icon ui-icon-pencil"></span></button>
                <button type="button" class="btn btn-default btn-sm" onclick="DeleteCurrentPost()"><span class="ui-icon ui-icon-trash"></span></button>
                <button type="button" class="btn btn-default btn-sm" onclick="PublishedPost()"><span class="post-ispublished ui-icon"></span></button>
            </td>
            <td style="text-align:right">
                <button type="button" class="btn btn-default btn-sm" onclick="PrevPost()"><span class="ui-icon ui-icon-triangle-1-w"></span></button>
                <button type="button" class="btn btn-default btn-sm" onclick="NextPost()"><span class="ui-icon ui-icon-triangle-1-e"></span></button>
            </td>
        </tr>
    </table>
</div>




<link href="~/Content/jquery.jqGrid/ui.jqgrid.css" rel="stylesheet" />

<style>
    /*pager*/
    .ui-jqgrid .ui-pg-input {
        height: 20px;
    }
    .ui-jqgrid .ui-jqgrid-pager {
        height: 26px;
    }

    /*only horizontal lines*/
    #jqgPosts .ui-jqgrid tr.ui-row-ltr td { 
        border-bottom-style: none; 
        border-right-style: none;
    }
    #jqgPosts td { 
        border-bottom-style: none; 
        border-right-style: none;
    }
    #jqgPosts .ui-widget-content{
        border: solid #b5b5b5;
        border-width: 1px 0;
    }

    /*remove table border*/
    #gbox_jqgPosts{
        border: none;
    }
    /*highlight selected row*/
    #jqgPosts .ui-state-highlight,#jqgPosts .ui-widget-content .ui-state-highlight,#jqgPosts .ui-widget-header .ui-state-highlight {
        border: solid #808080;
        border-width: 1px 0;
        background: none;
        color: black;
    }
    /*enable hightlight icons*/
    .ui-jqgrid .ui-state-highlight .ui-icon {
        background-image: url(../../Content/themes/base/images/ui-icons_222222_256x240.png);
    }
    /*height row*/
    #jqgPosts .row-height {
        white-space: nowrap;
        height: 30px
    }


    /*modal*/
    .lock {
    /* Скрываем скроллбары */
        overflow: hidden;
    } 
    .modal {
        /* По умолчанию не показываем содержимое модальных окон */
        display: none;
    }
    .lock .modal {
        /* Показываем подложку (полупрозрачное затенение) при открытии модального окна */
        display: block;
        /* Саму подложку фиксируем и растягиваем на всё пространство */
        position: fixed;
        bottom: 0; left: 0; top: 0; right: 0;
        /* Если содержимое модального окна в подложку не влезает — показываем скроллбары */
        overflow: auto;
    }

    /*скрываем titlebar в диалоговом окне*/
    .noTitleBar .ui-dialog-titlebar {
        display:none
    }

    /*скрываем button close в titlebar в диалоговом окне*/
    .noCloseBtnTitle .ui-dialog-titlebar .ui-dialog-titlebar-close{
        display:none
    }

    .noCloseBtnTitle .ui-dialog-title{
        width: 100%;
    }

    .ui-dialog .ui-dialog-buttonpane{
        width: 100%;
    }
</style>






<script src="~/Scripts/jquery.jqGrid.min.js"></script>
<script src="~/Scripts/i18n/grid.locale-ru.js" type="text/javascript"></script>

<script type="text/javascript">

    // Variable
    //*******************************************
    var API_URL = "/api/ApiPost/";
    var postsIsPublished = "null";


    $(document).ready(function () {

        // Jquery UI
        //*******************************************

        // combobox
        $("#postColSearch").selectmenu();

        // grid
        $("#jqgPosts").jqGrid({
            hoverrows: false,
            toppager: true,
            viewrecords: true,
            height: "auto",
            autowidth: true,
            hidegrid: false,
            url: API_URL + "ispublished/" + postsIsPublished,
            mtype: "GET",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            serializeGridData: function (postData) { return JSON.stringify(postData); },
            colNames: ["Title", "Category", "User", "IsPublished", "PostedOn", "Modified", "Buttons", "Id"],
            colModel: [
                { name: "Title", index: "Title", editable: true, edittype: "text", width: 150, sortable: true, classes: ".row-height" },
                { name: "Category.Name", index: "Category.Name", editable: true, edittype: "text", width: 150, sortable: true, search: false },
                { name: "User.Login", index: "User.Login", editable: true, edittype: "text", width: 150, sortable: true, search: true },
                { name: "IsPublished", index: "IsPublished", editable: true, edittype: 'select', formatter: 'select', editoptions: { value: "true:;false:x" }, width: 30, sortable: true, search: false },
                { name: "PostedOn", index: "PostedOn", width: 150, sortable: true, search: false, formatter: 'date', formatoptions: { srcformat: 'Y/m/d H:i:s', newformat: 'd.m.Y H:i' } },
                { name: "Modified", index: "Modified", width: 100, sortable: true, search: false, formatter: 'date', formatoptions: { srcformat: 'Y/m/d H:i:s', newformat: 'd.m.Y H:i' } },
                { name: "Id", index: "Id", width: 100, sortable: false, search: false, formatter: function (cellvalue, options, rowObject) {
                        return "<a href='/Post/ShowModal/" + cellvalue + "' class='viewPost btn btn-default btn-sml'><span class='ui-icon ui-icon-document'></span></a> <a href='/Post/Delete/" + cellvalue + "' class='deletePost btn btn-default btn-sml'><span class='ui-icon ui-icon-trash'></span></a>";}
                },
                { name: "Id", index: "Id", width: 30, sorttype: "number", search: false, hidden: true }
            ],
            rowNum: 10,
            rowList: [10, 20, 30],
            pager: "#jpagerPosts",
            loadonce: true,
            sortname: "PostedOn",
            sortorder: "desc",
            loadComplete: function () {  // sort after first load
                var $self = $(this);
                if ($self.jqGrid("getGridParam", "datatype") === "json") {
                    setTimeout(function () {
                        $self.trigger("reloadGrid");
                    }, 50);
                };
            }
        });

        $("#jqgPosts").jqGrid('navGrid', '#jpagerPosts', {
            cloneToTop: true,
            search: false,
            refresh: false,
            add: false,
            del: false,
            edit: false,
            view: false
        });

        // remove bottom pager
        $("div#jpagerPosts")[0].remove();





        // Search toolbar
        $("#postSearchText").keypress(function (e) {
            var key = e.charCode || e.keyCode || 0;
            if (key === $.ui.keyCode.ENTER) { // 13
                $("#postSearch").click();
            }
        });

        $("#postSearch").click(function () {
            var rules = [], i, cm, postData = $("#jqgPosts").jqGrid("getGridParam", "postData"),
                colModel = $("#jqgPosts").jqGrid("getGridParam", "colModel"),
            searchText = $("#postSearchText").val(),
            l = colModel.length;
            postColSearch = $("#postColSearch option:selected").val();
            rules.push({
                field: postColSearch,
                op: "cn",
                data: searchText
            });
            postData.filters = JSON.stringify({
                groupOp: "OR",
                rules: rules
            });
            $("#jqgPosts").jqGrid("setGridParam", { search: true });
            $("#jqgPosts").trigger("reloadGrid", [{ page: 1, current: true }]);
            return false;
        });

        // reset search
        $("#postResetSearch").click(function () {
            $("#jqgPosts").jqGrid('setGridParam', { search: false, postData: { "filters": "" } }).trigger("reloadGrid");
            $("#postSearchText").val("");
        });



        // Modal dialog
        //*******************************************

        $.ajaxSetup({ cache: false });

        // view post
        $("#jqgPosts").on("click", ".viewPost", function (e) {
            e.preventDefault();
            $("<div id='dialogContent'></div>")
                .addClass("dialog")
                .appendTo("body")
                .load(this.href, function () {
                    ChangePostIsPublishedIcon();
                })
                .dialog({
                    create: function (event, ui) {
                        $(".ui-dialog-title").html($("#post_dlg_toolbar").html());
                    },
                    dialogClass: 'noCloseBtnTitle',
                    resizable: false,
                    draggable: false,
                    modal: true,
                    close: function () { $(this).remove() },
                    position: { my: "center", at: "center top+110" },
                    width: 1000,
                    buttons: {
                        Cancel: function () {
                            $(this).dialog("close");
                        }
                    }
                });
        });

        // delete post
        $("#jqgPosts").on("click", ".deletePost", function (e) {
            e.preventDefault();
            title = $(this).attr("data-dialog-title");
            id = $(this).attr("data-post-id");
            $("<div id='dialogContent'></div>")
                .addClass("dialog")
                .appendTo("body")
                .load(this.href)
                .dialog({
                    dialogClass: 'noTitleBar',
                    resizable: false,
                    draggable: false,
                    modal: true,
                    title: title,
                    close: function () { $(this).remove() },
                    position: { my: "center", at: "center center-170" },
                    width: 400,
                    buttons: {
                        "Delete": function () {
                            DeletePost(id);
                            $(this).dialog("close");
                        },
                        Cancel: function () {
                            $(this).dialog("close");
                        }
                    }
                });
        });

        // add post
        $("#addPost").on("click", function (e) {
            e.preventDefault();
            $("<div id='dialogContent'></div>")
                .addClass("dialog")
                .appendTo("body")
                .load(this.href)
                .dialog({
                    dialogClass: 'noTitleBar',
                    closeOnEscape: false,
                    resizable: false,
                    draggable: false,
                    modal: true,
                    title: "Добавить пост",
                    close: function () { $(this).remove() },
                    width: 800,
                    height: ($(window).height() - 80),
                    position: { my: "center", at: "center top+350" },
                    buttons: {
                        "Добавить": function () {
                            AddPost();
                        },
                        Cancel: function () {
                            $(this).dialog("close");
                        }
                    }
                });
        });

        // close
        $(".close").on("click", function (e) {
            e.preventDefault();
            $(this).closest(".dialog").dialog("close");
        });

    });
    // End JQuery
    //********************************************



    // Functions
    //*******************************************

    // refresh jqGrid
    function RefreshGrid() {
        $.ajax({
            url: API_URL + "ispublished/" + postsIsPublished,
            type: "GET",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (data) {
                $("#jqgPosts").jqGrid("clearGridData")
                .jqGrid("setGridParam", { data: data, search: true })
                .trigger("reloadGrid", [{ page: 1, current: true }]);
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    };

    // delete post
    function DeletePost(id) {
        $.ajax({
            url: API_URL + id,
            type: "DELETE",
            contentType: "application/json;charset=utf-8",
            success: function () {
                RefreshGrid();
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    };

    // add post
    function AddPost() {
        tinymce.triggerSave();                              
        $.ajax({
            url: "@Url.Action("CreateModal", "Post")",
            type: "POST",
            data: $('form').serialize(),
            datatype: "json",
            success: function (result) {
                $("#dialogContent").html(result);
                if($("#dialogContent").text() === "") {
                    $("#dialogContent").dialog("close");
                    RefreshGrid();
                }
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    };

    // prev post
    function PrevPost()
    {
        var allRows = $('#jqgPosts').jqGrid('getRowData');
        var currentId = $("#dialogContent .post-info .post-id").text();
        $.each(allRows, function (key, value) {
            if (currentId === value.Id) {
                if (key > 0) {
                    currentId = allRows[key - 1].Id;
                }
                else {
                    currentId = allRows[allRows.length - 1].Id;
                    return false;
                }
            }
        });
        $.ajax({
            url: "/Post/ShowModal/" + currentId,
            type: "GET",
            success: function (result) {
                $("#dialogContent").html(result);
                ChangePostIsPublishedIcon();
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    }

    // next post
    function NextPost() {
        var allRows = $('#jqgPosts').jqGrid('getRowData');
        var currentId = $("#dialogContent .post-info .post-id").text();
        $.each(allRows, function (key, value) {
            if (currentId === value.Id) {
                if (key < (allRows.length - 1)) {
                    currentId = allRows[key + 1].Id;
                    return false;
                }
                else {
                    currentId = allRows[0].Id;
                }
            }
        });
        $.ajax({
            url: "/Post/ShowModal/" + currentId,
            type: "GET",
            success: function (result) {
                $("#dialogContent").html(result);
                ChangePostIsPublishedIcon();
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    }

    // edit post
    function EditPost() {
        var currentId = $("#dialogContent .post-info .post-id").text();
        $.ajax({
            url: "/Post/EditModal/" + currentId,
            type: "GET",
            success: function (result) {
                $(".dialog").height($(window).height() - 180);
                $("#dialogContent").html(result);
                $(".ui-dialog").removeClass("noCloseBtnTitle");
                $(".ui-dialog").addClass("noTitleBar");
                var buttonSet = $('#dialogContent').parent().find('.ui-dialog-buttonset');
                var saveButton = $('<button>Сохранить</button>');
                saveButton.button().click(function () {
                    SaveEditPost();
                });
                buttonSet.prepend(saveButton);
                $("#dialogContent").dialog("option", "closeOnEscape", false);
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    };

    // delete post
    function DeleteCurrentPost() {
        var currentId = $("#dialogContent .post-info .post-id").text();
        $("<div id='deleteDialogContent'></div>")
            .addClass("dialog")
            .appendTo("body")
            .html("<p>Удалить пост?</p>")
            .dialog({
                dialogClass: '',
                resizable: false,
                draggable: false,
                modal: false,
                close: function () { $(this).remove() },
                position: { my: "center", at: "center" },
                width: 300,
                buttons: {
                    "Удалить": function () {
                        $.ajax({
                            url: API_URL + currentId,
                            type: "DELETE",
                            contentType: "application/json;charset=utf-8",
                            success: function () {
                                $("#deleteDialogContent").remove();
                                RefreshGrid();
                                NextPost();
                            },
                            error: function (x, y, z) {
                                alert(x + '\n' + y + '\n' + z);
                            }
                        });
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
    };

    // save edit post
    function SaveEditPost() {
        tinymce.triggerSave();                              
        $.ajax({
            url: "@Url.Action("EditModal", "Post")",
            type: "POST",
            data: $('form').serialize(),
            datatype: "json",
            success: function (result) {
                $("#dialogContent").html(result);
                if($("#dialogContent").text() === "") {
                    $("#dialogContent").dialog("close");
                    RefreshGrid();
                }
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    };

    // published post
    function PublishedPost() {
        var currentId = $("#dialogContent .post-info .post-id").text();
        var isPublished = $(".ui-dialog-titlebar .post-ispublished").is(".ui-icon-locked") ? true : false;
        $.ajax({
            url: API_URL + "SetPublished/" + currentId,
            type: "PUT",
            contentType: "application/json;charset=utf-8",
            data: JSON.stringify(isPublished),
            success: function () {
                $(".ui-dialog-titlebar .post-ispublished").toggleClass(function () {
                    if ($(this).is(".ui-icon-unlocked")) {
                        $(this).removeClass("ui-icon-unlocked");
                        return "ui-icon-locked";
                    } else {
                        $(this).removeClass("ui-icon-locked");
                        return "ui-icon-unlocked";
                    }
                });
                RefreshGrid();
            },
            error: function (x, y, z) {
                alert(x + '\n' + y + '\n' + z);
            }
        });
    };

    // show all posts
    function ShowAllPosts() {
        postsIsPublished = "null";
        RefreshGrid();
    };

    // show published posts
    function ShowPublishedPosts() {
        postsIsPublished = "true";
        RefreshGrid();
    };

    // show not published posts
    function ShowNotPublishedPosts() {
        postsIsPublished = "false";
        RefreshGrid();
    };

    // change post is published icon
    function ChangePostIsPublishedIcon() {
        if ($(".post-info .post-ispublished").text().toLowerCase() == "true") {
            $(".ui-dialog-titlebar .post-ispublished").removeClass("ui-icon-unlocked");
            $(".ui-dialog-titlebar .post-ispublished").removeClass("ui-icon-locked");
            $(".ui-dialog-titlebar .post-ispublished").addClass("ui-icon-unlocked");
        }
        else {
            $(".ui-dialog-titlebar .post-ispublished").removeClass("ui-icon-unlocked");
            $(".ui-dialog-titlebar .post-ispublished").removeClass("ui-icon-locked");
            $(".ui-dialog-titlebar .post-ispublished").addClass("ui-icon-locked");
        };
    }

</script>




